{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n    \n    for char in paren_string:\n        if char == ' ':\n            continue\n        \n        if char == '(':\n            open_count += 1\n            current_group += char\n            \n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            \n            if open_count == 0:\n                result.append(current_group)\n                current_group = ''\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    \n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for number in numbers[:-1]:\n        result.extend([number, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(s: str) -> int:\n        max_depth = current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1 if numbers else 1\n    for number in numbers:\n        total_product *= number\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    # Start from the full length of the string and move backwards\n    for i in range(len(string), 0, -1):\n        # Check if the current postfix is a palindrome\n        if is_palindrome(string[i-1:]):\n            # If it is, reverse the prefix before this palindromic suffix\n            return string + string[:i-1][::-1]\n    \n    # In case no palindromic suffix is found (which theoretically shouldn't happen)\n    return string[::-1] + string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    \n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda word: number_map[word])\n    \n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n            \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    def poly(x, coeffs):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    # Newton's method to find the root\n    def newton_method(f, df, x0, tol=1e-7, max_iter=1000):\n        x = x0\n        for _ in range(max_iter):\n            fx = f(x)\n            if abs(fx) < tol:\n                return x\n            dfx = df(x)\n            if dfx == 0:\n                raise ValueError(\"Derivative is zero. No solution found.\")\n            x -= fx / dfx\n        raise ValueError(\"Maximum iterations exceeded. No solution found.\")\n\n    # Define the polynomial and its derivative\n    def f(x):\n        return poly(x, xs)\n\n    def df(x):\n        return sum(i * coeff * (x ** (i - 1)) for i, coeff in enumerate(xs) if i != 0)\n\n    # Initial guess\n    x0 = 0\n\n    # Find the zero using Newton's method\n    root = newton_method(f, df, x0)\n    \n    return round(root, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    values_to_sort = [l[i] for i in third_indices]\n    sorted_values = sorted(values_to_sort)\n    \n    result = l[:]\n    for idx, new_value in zip(third_indices, sorted_values):\n        result[idx] = new_value\n    \n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    if not l:\n        raise ValueError(\"The list cannot be empty.\")\n    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even = sorted(x for i, x in enumerate(l) if i % 2 == 0)\n    return [even[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements back to original order unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci_sequence():\n        a, b = 1, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    prime_fibs = []\n    for fib in fibonacci_sequence():\n        if is_prime(fib):\n            prime_fibs.append(fib)\n            if len(prime_fibs) == n:\n                return prime_fibs[-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x == 0:\n        return \"0\"\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        e = a + b + c + d\n        a, b, c, d = b, c, d, e\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n\n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    text = ''.join(filter(str.isalnum, text)).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    result = 1\n    base = 2 % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    return (all(x <= y for x, y in zip(l, l[1:])) or \n            all(x >= y for x, y in zip(l, l[1:])))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def smallest_divisor(x):\n        if x % 2 == 0:\n            return 2\n        for i in range(3, int(x**0.5) + 1, 2):\n            if x % i == 0:\n                return i\n        return x\n\n    factor = n\n    while factor > 1:\n        divisor = smallest_divisor(factor)\n        factor //= divisor\n    return divisor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s if char in 'aeiou')\n    if s.endswith('y'):\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    import re\n    numbers = list(map(int, re.findall(r'\\d+', s)))\n    return n - sum(numbers)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = float('inf')\n    min_index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            min_index = i\n            \n    return [min_even, min_index] if min_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    \n    frequency = Counter(lst)\n    result = -1\n\n    for num in frequency:\n        if num > 0 and frequency[num] >= num:\n            result = max(result, num)\n\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes = [x for x in range(2, a) if is_prime(x)]\n\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    root = int(round(abs(a) ** (1/3)))\n    return a == root**3 or a == -root**3"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for char in num if char in prime_hex_digits)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]\n    return f\"db{binary_string}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n            \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    def get_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [get_letter_grade(g) for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 2 * (9 ** (n - 1))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        columns_indices = sorted((j for j, val in enumerate(row) if val == x), reverse=True)\n        for j in columns_indices:\n            coordinates.append((i, j))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array[:]\n    \n    first_index_value = array[0]\n    last_index_value = array[-1]\n    \n    if (first_index_value + last_index_value) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    import string\n\n    def shift_char(c, n):\n        if c in string.ascii_lowercase:\n            return chr((ord(c) - ord('a') + n) % 26 + ord('a'))\n        elif c in string.ascii_uppercase:\n            return chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return c\n\n    shift_amount = (2 * 2)\n    encrypted_string = ''.join(shift_char(char, shift_amount) for char in s)\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    import re\n\n    # Split the string into sentences using regex to handle '.', '?', '!'\n    sentences = re.split(r'[.!?]', S)\n\n    # Initialize a counter for boredoms\n    boredom_count = 0\n\n    # Iterate over each sentence and check if it starts with \"I\"\n    for sentence in sentences:\n        stripped_sentence = sentence.strip()\n        if stripped_sentence.startswith('I'):\n            boredom_count += 1\n\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = \"aeiou\"\n    result = []\n    \n    for char in message:\n        if char.isalpha():\n            new_char = char.swapcase()\n            \n            if new_char.lower() in vowels:\n                index = vowels.index(new_char.lower())\n                new_vowel = vowels[(index + 2) % len(vowels)]\n                \n                if new_char.isupper():\n                    new_vowel = new_vowel.upper()\n                    \n                new_char = new_vowel\n            \n            result.append(new_char)\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max(filter(is_prime, lst), default=None)\n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    keys = list(d.keys())\n    first_key_is_str = isinstance(keys[0], str)\n    all_keys_same_case = (all(isinstance(key, str) for key in keys) and \n                          ((keys[0].islower() and all(key.islower() for key in keys)) or\n                           (keys[0].isupper() and all(key.isupper() for key in keys))))\n    return first_key_is_str and all_keys_same_case"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return (unit_a * unit_b) % 100"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        result = int(num + 0.5) if num % 1 >= 0.5 else int(num)\n    else:\n        result = int(num - 0.5) if num % 1 < -0.5 else int(num)\n    return result"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    current_stones = n\n    for _ in range(n):\n        result.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    import re\n    return re.split(r'[,\\s]+', s)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    return bin(rounded_average)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n\n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digit_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\",\n        4: \"Four\", 5: \"Five\", 6: \"Six\",\n        7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered)\n    reversed_sorted = sorted_filtered[::-1]\n    \n    return [digit_to_name[digit] for digit in reversed_sorted]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n\n    def sum_up_to(x):\n        return (x * (x + 1)) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to(i))\n    \n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        total = 0\n        is_negative = n < 0\n        n = abs(n)\n        \n        while n > 0:\n            digit = n % 10\n            if is_negative and n == -n // 10 * 10:\n                digit *= -1\n            total += digit\n            n //= 10\n        \n        return total\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n\n    for i in range(n):\n        rotated_arr = arr[-i:] + arr[:-i]\n        if rotated_arr == sorted_arr:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(x % 2 for x in lst1)\n    even_in_lst2 = sum(1 - (x % 2) for x in lst2)\n    return \"YES\" if odd_in_lst1 <= even_in_lst2 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    from collections import defaultdict\n    \n    if not test:\n        return {}\n    \n    counts = defaultdict(int)\n    for char in test.split():\n        counts[char] += 1\n\n    max_count = max(counts.values(), default=0)\n    result = {char: count for char, count in counts.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    filtered_s = ''.join(char for char in s if char not in c)\n    is_palindrome = filtered_s == filtered_s[::-1]\n    return (filtered_s, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    def count_odds(s):\n        return sum(int(digit) % 2 != 0 for digit in s)\n    \n    result = []\n    for i, string in enumerate(lst):\n        num_odds = count_odds(string)\n        message = (\n            f\"the number of odd elements {num_odds}n the str{num_odds}ng \"\n            f\"{num_odds} of the 4nput.\"\n        )\n        result.append(message.replace(\"1\", \"n\").replace(\"0\", \"four\"))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    current_min = nums[0]\n    current_sum = 0\n    \n    for num in nums:\n        if current_sum > 0:\n            current_sum = 0\n        current_sum += num\n        current_min = min(current_min, current_sum)\n    \n    return current_min"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    return sum((sum(row) + capacity - 1) // capacity for row in grid)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word if char.lower() in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    n = len(word)\n    for i in range(n - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    a, b = lst\n    options = [a + b, b + a]\n    return 'Yes' if any(is_good(option) for option in options) else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 0 <= x < 100)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    \n    result = set()\n    while n != 1:\n        if n % 2 != 0:\n            result.add(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    \n    result.add(1)  # Add the final number in the sequence, which is always 1\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    import re\n    if not date:\n        return False\n    match = re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-((19|20)\\d{2})$', date)\n    if not match:\n        return False\n\n    month, day, year = map(int, match.groups())\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2:\n        is_leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n        if day > 29 or (day == 29 and not is_leap_year):\n            return False\n    elif day > 31:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    seen = set()\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] in seen and lst[i] != lst[i - 1]:\n            return False\n        seen.add(lst[i])\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    length_of_intersection = intersection_end - intersection_start + 1\n    \n    return \"YES\" if is_prime(length_of_intersection) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    total_sum = sum(abs(x) for x in arr)\n    product_of_signs = 1\n    has_zero = False\n\n    for num in arr:\n        if num == 0:\n            has_zero = True\n            break\n        elif num > 0:\n            continue\n        else:  # num < 0\n            product_of_signs *= -1\n\n    return None if has_zero else total_sum * product_of_signs"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def get_min_neighbor_value(x, y):\n        value = grid[x][y]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                value = min(value, grid[nx][ny])\n        return value\n    \n    result = []\n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            x, y = i, j\n            for _ in range(1, k):\n                next_value = get_min_neighbor_value(x, y)\n                path.append(next_value)\n                \n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == next_value:\n                        x, y = nx, ny\n                        break\n            \n            if len(result) == 0 or path < result:\n                result = path\n    \n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return []\n    \n    tribonacci = [0] * (n + 1)\n    if n >= 0:\n        tribonacci[1] = 3\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i // 2\n        else:\n            if i + 1 <= n:\n                tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]\n            else:\n                tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2]\n\n    return tribonacci[:n + 1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    def check_nested(s):\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '[':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ']':\n                depth -= 1\n        return max_depth > 1\n\n    open_brackets = []\n    i = 0\n    while i < len(string):\n        if string[i] == '[':\n            j = i + 1\n            balance = 1\n            while j < len(string) and balance != 0:\n                if string[j] == '[':\n                    balance += 1\n                elif string[j] == ']':\n                    balance -= 1\n                j += 1\n            if balance == 0:\n                open_brackets.append((i, j - 1))\n        i += 1\n\n    for start in range(len(open_brackets)):\n        for end in range(start + 1, len(open_brackets)):\n            subsequence = string[open_brackets[start][0]:open_brackets[end][1] + 1]\n            if check_nested(subsequence):\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip().split()[-1][-1]\n    return last_char.isalpha()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n\n    a_converted = convert_to_float(a)\n    b_converted = convert_to_float(b)\n\n    if a_converted > b_converted:\n        return a\n    elif a_converted < b_converted:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and (n - 2) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    parts = []\n    current_part = ''\n    \n    for char in text:\n        if char == '_':\n            current_part += ' '\n        else:\n            if current_part and current_part[-1] == ' ':\n                if len(current_part) > 2:\n                    current_part = current_part[:2] + '-'\n            parts.append(current_part)\n            current_part = char\n    \n    parts.append(current_part)\n    \n    result = ''.join(part.replace(' ', '_') for part in parts)\n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    \n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n    \n    name_part, extension_part = parts\n    \n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    if extension_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    from fractions import Fraction\n    \n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n    \n    result = frac_x * frac_n\n    \n    return result.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def first_and_last_odd(n):\n        s = str(abs(n))\n        return len(s) > 0 and int(s[0]) % 2 == 1 and int(s[-1]) % 2 == 1\n    \n    return sum(1 for num in nums if num > 10 and first_and_last_odd(num))"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n + 1)]\n    count0, count1, count2 = a.count(0), a.count(1), a.count(2)\n    \n    # Triplets of type (0, 0, 0)\n    result = (count0 * (count0 - 1) * (count0 - 2)) // 6\n    \n    # Triplets of type (1, 1, 1)\n    result += (count1 * (count1 - 1) * (count1 - 2)) // 6\n    \n    # Triplets of type (2, 2, 2)\n    result += (count2 * (count2 - 1) * (count2 - 2)) // 6\n    \n    # Triplets of type (0, 1, 2)\n    result += count0 * count1 * count2\n\n    return result"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n\n    if start_index < end_index:\n        return tuple(planets[start_index + 1:end_index])\n    else:\n        return tuple(planets[end_index + 1:start_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    double_a = a + a\n    return b in double_a"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(abs(num))\n    even_count = sum(int(digit) % 2 == 0 for digit in num_str)\n    odd_count = len(num_str) - even_count\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-9"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def unique_char_count(word):\n        return len(set(word))\n    \n    max_unique = -1\n    result_word = \"\"\n    \n    for word in words:\n        count = unique_char_count(word)\n        if (count > max_unique) or (count == max_unique and word < result_word):\n            max_unique = count\n            result_word = word\n            \n    return result_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = min(need + number, number + remaining)\n    carrots_left = max(remaining - (total_eaten - number), 0)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n            has_letter = True\n        else:\n            result.append(char)\n    \n    return ''.join(result) if has_letter else ''.join(reversed(result))"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return sorted(set(int(digit) for digit in map(str, range(start, end + 1)) if int(digit) % 2 == 0))"}
